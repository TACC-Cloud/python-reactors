USAGE
=====
This container image implements an Abaco function:
{{ docstr }}
It is runnable outside Abaco as follows:

  docker run -it --env var=val REPO

Parameters
----------

Abaco passes parameters into the function via URL parameters:

  curl -XPOST https://api.tacc.cloud/actors/v2/message?foo=bar

In this example, an environment variable 'FOO' will be set in the 
container runtime with a value of 'bar'. To allow an Abaco function 
to be run independently, this can be emulated by setting environment 
variables when running the function container.

  docker run --env FOO=bar <container> <command>

A function developer may specify one or more valid sets of 
parameters for use within the function. These parameter sets
can be validated or classified using built-in functions from 
the Reactors module.

This function accepts the following environment variable sets:
{% for item in contexts %}
Context schema.$id: {{ item.id }}
File: {{ item.file}}
Parameters:{% for p in item.vars %}
  * {{ p.id }} desc: {{ p.description }}; type: {{ p.type }}; required: {{ p.required }}{% endfor %}
{% endfor %}
Please note that variable sets beyond 'Default' must also contain the 
variables specified in 'Default', such as 'MSG'.

JSON Messages
-------------

Abaco accepts JSON-formatted messages that are transmitted to the 
container runtime via the 'MSG' environment variable. They can, 
in turn, be validated or classified using built-in methods from 
the Reactors module.

  curl -XPOST -H "Content-Type: application/json" \
       -d '{"message": {"foo": "bar"}}' \
       https://api.tacc.cloud/actors/v2/messages

This function accepts and can validate JSON-formatted values 
for 'MSG' that validate to the following JSON schemas:
{% for item in messages %}
  * Message schema.$id: {{ item.id }}
    File: {{ item.file}}
{% endfor %}

Configuration
-------------

The Reactor object provided by this SDK and usable within the function
is configured via files found at:
{% for item in config_locs %}
  * {{ item }}{% endfor %}

If this current function utilizes this feature of the SDK, its 
current configuration is:

---
{{ union_config_yml }}

First- or second level keys in the configuration can be overridden 
by setting environment variables at run time. The following 
variables are supported:
{% for item in env_vars %}
  * {{ item }}{% endfor %}


Tapis Client
------------

This function may require an active Tapis client. One is automatically 
provided by Abaco but can be injected at run time by providing either 
a credentials file or setting environment variables.

Credentials File
~~~~~~~~~~~~~~~~

A Tapis client may be configured by volume mounting a credentials file:

  docker run -it -v ${HOME}/.agave:/root/.agave REPO

Environment Variables
~~~~~~~~~~~~~~~~~~~~~

A Tapis client may be configured by passing these variables:

  * {{ tapis.api_server }} - API server URL
  * {{ tapis.api_token }} - Oauth2 access token
