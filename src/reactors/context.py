"""Classes and functions for working with and validating the Reactor context
"""
import functools
import glob
import json
import os
from .jsonmessages import validate_message, load_schema

BASE_CONTEXT_SCHEMA = '''
{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "AbacoBaseContext",
	"title": "Baseline Abaco Context",
	"type": "object",
	"properties": {
		"MSG": {
			"type": "string",
			"description": "Message received by the Actor"
		},
		"_abaco_Content-Type": {
			"type": "string",
			"description": "Content type of the message passed to Abaco"
		},
		"_abaco_api_server": {
			"type": "string",
			"description": "API server for an instance of Tapis",
			"format": "uri"
		},
		"_abaco_access_token": {
			"type": "string",
			"description": "Oauth Bearer token for Tapis access, generated by Abaco"
		},
		"_abaco_execution_id": {
			"type": "string",
			"description": "Public identifier of the current Actor Execution"
		},
		"_abaco_username": {
			"type": "string",
			"description": "Tapis username who is requesting the execution of the Actor",
			"pattern": "^[a-z][0-9a-z]{2,7}",
			"examples": [
				"vaughn",
				"tg840555",
				"sd2etest1"
			]
		},
		"_abaco_actor_dbid": {
			"type": "string",
			"description": "Internal identifier for the Actor"
		},
		"_abaco_actor_id": {
			"type": "string",
			"description": "Public identifier for the Actor",
			"examples": [
				"e5QKEW8L0BeZ4",
				"6rgbzrjRKoBDk"
			]
		},
		"_abaco_actor_state": {
			"type": "object",
			"description": "Serialized object for persisting state between Actor Executions"
		},
		"_abaco_worker_id": {
			"type": "string",
			"description": "Public identifier for the Abaco worker handling the current Execution"
		},
		"_abaco_container_repo": {
			"type": "string",
			"description": "Linux container repo for the current Actor",
			"examples": [
				"tacc/tacbobot",
				"tacobot",
				"tacobot:latest",
				"tacobot:600a1af",
				"tacc/tacobot:600a1af",
				"index.docker.io/tacc/tacobot:600a1af"
			]
		},
		"_abaco_actor_name": {
			"type": "string",
			"description": "Public name of the current Actor"
		},
		"x-nonce": {
			"type": "string",
			"description": "An Abaco nonce (API key)"
		}
	},
	"required": ["MSG"],
	"additionalProperties": true
}
'''

UNION_SCHEMA_TEMPLATE = '''
{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "AbacoUnionContext",
	"title": "Union of Base and User-provided environment contexts",
	"allOf": []
}
'''

def find_context_schema_files():
    """Searches defined filesystem locations for a context.jsonschema
    """
    schema_files = []
    DIRS = [os.path.join(os.getcwd(), 'schemas'), os.getcwd(), '/schemas', '/']
    for d in DIRS:
        result = glob.glob(os.path.join(d, 'context.jsonschema'))
        schema_files.extend(result)
    return schema_files

def union_context_schema(user_context_schema=None):
    """Generates a union schema between the user-provided and base context schemas.
    """
    if user_context_schema is None:
        user_context_schemas = find_context_schema_files()
        if len(user_context_schemas) > 0:
            user_context_schema = user_context_schemas[0]
    schema = json.loads(UNION_SCHEMA_TEMPLATE)
    base_context_schema = json.loads(BASE_CONTEXT_SCHEMA)
    # Performs an outer merge on the provided schemas
    schema['allOf'].append(base_context_schema)
    if user_context_schema is not None:
        # TODO - force allow additional properties
        schema['allOf'].append(user_context_schema)
    return schema
    
